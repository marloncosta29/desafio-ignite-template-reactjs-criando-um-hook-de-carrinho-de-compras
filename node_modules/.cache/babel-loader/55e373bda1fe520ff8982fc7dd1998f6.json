{"ast":null,"code":"var _jsxFileName = \"/home/marlon/projetos/Ignite/desafio-ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  var _prevCartRef$current;\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n  const prevCartRef = useRef();\n  useEffect(() => {\n    prevCartRef.current = cart;\n  });\n  const cartPreviousValue = (_prevCartRef$current = prevCartRef.current) !== null && _prevCartRef$current !== void 0 ? _prevCartRef$current : cart;\n\n  const addProduct = async productId => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find(p => p.id === productId);\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = { ...product.data,\n          amount: 1\n        };\n        updatedCart.push(newProduct);\n      }\n\n      setCart(updatedCart);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const updatedCart = [...cart];\n      const productIndexFound = updatedCart.findIndex(product => product.id === productId);\n\n      if (productIndexFound >= 0) {\n        updatedCart.splice(productIndexFound, 1);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) {\n        return;\n      }\n\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      const updatedCart = [...cart];\n      const productExistFound = updatedCart.find(p => p.id === productId);\n\n      if (productExistFound) {\n        productExistFound.amount = amount;\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"AIEJbIlDfFDBbT4SodNI368PkzA=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/marlon/projetos/Ignite/desafio-ignite-template-reactjs-criando-um-hook-de-carrinho-de-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useEffect","useRef","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","prevCartRef","current","cartPreviousValue","addProduct","productId","updatedCart","productExists","find","p","id","stock","get","stockAmount","data","amount","currentAmount","error","product","newProduct","push","setItem","stringify","removeProduct","productIndexFound","findIndex","splice","Error","updateProductAmount","productExistFound","useCart","context"],"mappings":"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","sourcesContent":["import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { toast } from \"react-toastify\";\nimport { api } from \"../services/api\";\nimport { Product, Stock } from \"../types\";\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem(\"@RocketShoes:cart\");\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const prevCartRef = useRef<Product[]>();\n\n  useEffect(() => {\n    prevCartRef.current = cart;\n  });\n\n  const cartPreviousValue = prevCartRef.current ?? cart;\n\n  const addProduct = async (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productExists = updatedCart.find((p) => p.id === productId);\n\n      const stock = await api.get(`/stock/${productId}`);\n\n      const stockAmount = stock.data.amount;\n      const currentAmount = productExists ? productExists.amount : 0;\n      const amount = currentAmount + 1;\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n      if (productExists) {\n        productExists.amount = amount;\n      } else {\n        const product = await api.get(`/products/${productId}`);\n        const newProduct = {\n          ...product.data,\n          amount: 1,\n        };\n        updatedCart.push(newProduct);\n      }\n\n      setCart(updatedCart);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n    } catch {\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      const updatedCart = [...cart];\n      const productIndexFound = updatedCart.findIndex(\n        (product) => product.id === productId\n      );\n      if (productIndexFound >= 0) {\n        updatedCart.splice(productIndexFound, 1);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      if (amount <= 0) {\n        return;\n      }\n\n      const stock = await api.get(`/stock/${productId}`);\n      const stockAmount = stock.data.amount;\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n      const updatedCart = [...cart];\n      const productExistFound = updatedCart.find((p) => p.id === productId);\n      if (productExistFound) {\n        productExistFound.amount = amount;\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n        setCart(updatedCart);\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}